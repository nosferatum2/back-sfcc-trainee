<project name="npm-install" default="npm-install" basedir="." >

<!--This task will run npm install and locally install node modules as
  	specified in package.json. It is referenced and run as part of builders.xml,
  	but may be run individually.

  	The task requires:
  		1. a package.json file in the root of the project
  		2. a local installation of node
  		3. network access -->

	<!-- Wrapper to run npm install -->
	<target name="npm-install" if="${has_package}" depends="check-has-package, get-package-json, local-node-version, version-compare, check-node-match, run-npm-install">
	</target>

	<!-- Verify presence of package.json file -->
	<condition property="has_package" else="false">
		<and>
	    	<available file="${basedir}/../package.json" type="file"/>
	    </and>
	</condition>

	<!-- Alert if package.json file is not present -->
	<target name="check-has-package" unless="${has_package}">
		<echo level="error">The package.json file was not found in the root of the project.</echo>
		<echo level="error">This step will be skipped and npm install will not be run.</echo>
	</target>

	<!-- Save the package.json file contents to packageJSON variable and assign to pkg_display and pkg_node_v properties -->
	<target name="get-package-json" if="${has_package}">
		<loadfile property="packageJSON" srcFile="${basedir}/../package.json" />
		<!-- Parse packageJSON to get required node version and assign to pkg_display property
		for console output and pkg_node_v property for version comparison -->
		<script language="javascript">
			var package_node = JSON.parse(packageJSON).engines.node;
      		project.setProperty('pkg_display', package_node);
      		project.setProperty('pkg_node_v', package_node.replace(/[^0-9]/g, ""));
  		</script>
	</target>

  	<!-- Depending on OS, run cmd or bash to grab local node version and assign to local_node_v property -->
	<target name="local-node-version" if="${has_package}">
		<exec executable="cmd" osfamily="windows" failonerror="false" outputproperty="localnode">
			<arg value="/c"/>
			<arg value='node -v'/>
		</exec>
		<exec executable="/bin/bash" osfamily="unix" failonerror="false" outputproperty="localnode">
			<arg value="-c"/>
			<arg value='export PATH=/usr/local/bin:$PATH;
                    node -v; '/>
		</exec>
	  	<script language="javascript">
	  		project.setProperty('local_display', localnode.replace(/[a-zA-Z]/g,""));
	      	project.setProperty('local_node_v', localnode.replace(/[^0-9]/g, ""));
	  	</script>
  	</target>

  	<!-- Set node_match property based on matching of local_node_v and pkg_node_v -->
  	<target name="version-compare" if="${has_package}" depends="local-node-version">
  		<script language="javascript">
  			if(local_node_v === pkg_node_v) {
  				project.setProperty('node_match', true);
  			} else {
  				project.setProperty('node_match', false)
  			}
  		</script>
  	</target>

	<!-- Alert if local node version and the package.json file node versions do not match -->
	<target name="check-node-match" if="${has_package}" unless="${node_match}">
		<echo level="error">The locally installed version of node (${local_display}) does not match</echo>
		<echo level="error">the version of node required by the package.json file (${pkg_display}).</echo>
		<echo level="error">The version must match in order to run npm install.</echo>
		<echo level="error">Please set the local version of node to (${pkg_display})</echo>
	</target>

  	<!-- Depending on OS, run cmd or bash to run npm install and install node modules as specified in package.json then set have-node property to true for use in builders.xml -->
  	<target name="run-npm-install" if="${node_match}">
  		<echo level="info">Running npm install...</echo>
		<exec executable="cmd" osfamily="windows" failonerror="false">
			<arg value="/c"/>
			<arg value='npm install'/>
		</exec>
  		<exec executable="/bin/bash" osfamily="unix" failonerror="false">
  			<arg value="-c"/>
  			<arg value='export PATH=/usr/local/bin:$PATH;
  				npm install;'/>
  		</exec>
		<condition property="have-node" else="false">
        	<and>
            	<available file="${basedir}/../node_modules" type="dir"/>
	        </and>
	    </condition>
  	</target>

</project>