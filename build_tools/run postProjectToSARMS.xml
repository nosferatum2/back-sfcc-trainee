<project name="postProjectToSARMS" default="postProjectToSARMS" basedir=".">
 
  <!-- 
    This build task exists to allow you to run the postProjectToSARMS
    script locally separate from the builders.xml file. It is referenced 
    in the builders.xml file using <import file="filename"/> so that it will 
    run as part of the build. 
    
    Normally, this task would be run only on Jenkins, but if you want to run 
    locally, you will need:
      1. Define the ant.git.work.tree variable to be the value of the 
         git_work_tree variable. You can do this in Eclipse at 
         Window > Preferences > Ant > Runtime.
       
    The Jenkins server will need:
      1. The GIT_URL environment variable defined to contain the git url for 
         the project. This is set up by default for our Jenkins servers.
  -->

	<property name="sarmsUrl" value="https://sarms.lcgosc.com" />

  <!-- This just defines a prefix for accessing system environment variables -->
  <property environment="env" />

  <!-- 
    Using JS here since it's much easier to implement the logic when checking for 
    different properties in different environments. In Ant, it would be a pile of
    confusing conditions, tasks, and intermediate properties since property 
    definitions don't support if and unless clauses without extra 
    Ant:Contributions packages or funky extra xml namespaces.

    System environment variables can't be accessed by JS, so using Ant getProperty
    and setProperty for that.
  -->
  <script language="javascript">
    // For either the git.repo.url or ant.git.work.tree variables, split the url 
    // and grab the last element (e.g. 'reference-application.git')
    if (project.getProperty('env.GIT_URL') != null) {
      arr = project.getProperty('env.GIT_URL').split('/');
      if (arr.length > 0) {
        repoName = arr[arr.length-1];
        project.setProperty('git.repo.name', repoName.replace(".git",""));
        // Set the property for Ant to use
        project.setProperty('have-SARMS-props', "true");
      }
    } else {
        if (project.getProperty('ant.git.work.tree') != null) {
          project.setProperty('git.repo.name', project.getProperty('ant.git.work.tree'));
          // Set the property for Ant to use
          project.setProperty('have-SARMS-props', "true");
        } else {
            project.setProperty('have-SARMS-props', "false");
        }
    }
  </script>
    
  <!-- 
    The convention for the value of the project and client is <name of repo> to 
    ensure uniqueness among all other client projects in the SARMS system. 

    The basename task removes the '.git' at the end of the git.repo.name variable 
    (when set to ant.git.work.tree) so we end up with 'reference-application' from 
    'reference-application.git'. If git.repo.name is set to the GIT_URL value, 
    basename won't change anything. Using basename avoids having to deal with 
    forward or backslashes in different OS platforms.
  -->
  
  <basename property="repo.name" file="${git.repo.name}"/>
  
  <!-- Report any errors in configuration -->
  <target name="check-SARMS-properties" unless="${have-SARMS-props}">
    <echo level="info">Neither the ant.git.work.tree variable nor the GIT_URL variable is defined </echo>
    <echo level="info">which is required to determine the name of the project for the SARMS system. </echo>
    <echo level="info">Normally, the GIT_URL environment variable is defined on the server for the </echo>
    <echo level="info">Jenkins build. To run locally, the ant.git.work.tree variable should be </echo>
    <echo level="info">defined as ${git_work_tree}. In Eclipse, this is done using </echo>
    <echo level="info">Window - Preferences - Ant - Runtime.</echo>
    <fail message="Missing ant.git.work.tree variable or GIT_URL definition which is required for this step."/>
  </target>

  <!-- Check that the SARMS server is reachable (since VPN is required to be active when running locally) -->
  <condition property="SARMS-reachable" value="true" else="false"> 
  	<isreachable url="${sarmsUrl}"/>
  </condition> 
  	
  <target name="check-SARMS-reachable" unless="${SARMS-reachable}">
    <echo level="info">The SARMS server at ${sarmsUrl} is not reachable so the postProjectToSARMS step was skipped.</echo>
    <echo level="info">To run locally, VPN is required but this step is normally run only on the Jenkins server.</echo>
  </target>

  <!-- Define target to run postProjectToSARMS script -->
  <target name="postProjectToSARMS" depends="check-SARMS-properties, check-SARMS-reachable" if="${SARMS-reachable}">
    <exec executable="cmd" osfamily="windows" failonerror="true">
        <arg value="/c"/>
        <arg value='node util${file.separator}sarms${file.separator}postProjectToSARMS  
                      --api-credentials-path util${file.separator}sarms${file.separator}api_credentials.json
                      --sarms-server-url ${sarmsUrl} 
        	            --client-name ${repo.name} 
                      --platform-name "Salesforce Commerce Cloud SFRA" 
                      --platform-news "https://xchange.demandware.com/community/developer/security-notifications"
                      --package-file ..${file.separator}package.json' 
        />
    </exec>
    <exec executable="/bin/bash" osfamily="unix" failonerror="true">
        <arg value="-c"/>
        <arg value='export PATH=/usr/local/bin:$PATH; 
                    cd "${basedir}"; 
                    node util${file.separator}sarms${file.separator}postProjectToSARMS 
                      --api-credentials-path util${file.separator}sarms${file.separator}api_credentials.json
                      --sarms-server-url ${sarmsUrl} 
                      --client-name ${repo.name} 
                      --platform-name "Salesforce Commerce Cloud SFRA" 
                      --platform-news "https://xchange.demandware.com/community/developer/security-notifications"
                      --package-file ..${file.separator}package.json' 
        />
    </exec>
  </target>

</project>